// When color definition differs for dark and light variant,
// it gets @if ed depending on $variant

@import "tweaks-temp";
@import "color-palette";

@function gtkalpha($c, $a) {
  @return unquote("alpha(#{$c}, #{$a})");
}

@function on($color, $state: "primary") {
  @if ($color == "light") {
    $color: white;
  }
  @if ($color == "dark") {
    $color: black;
  }

  // Calculate color brightness according to https://www.w3.org/TR/AERT/#color-contrast
  $brightness: (red($color) * 299 + green($color) * 587 + blue($color) * 114) /
    1000;

  @if ($brightness >= 156) {
    @if ($state == "primary") {
      @return rgba(black, 0.87);
    }
    @if ($state == "secondary") {
      @return rgba(black, 0.6);
    }
    @if ($state == "disabled") {
      @return rgba(black, 0.38);
    }
    @if ($state == "secondary-disabled") {
      @return rgba(black, 0.26);
    }
    @if ($state == "track") {
      @return rgba(black, 0.26);
    }
    @if ($state == "track-disabled") {
      @return rgba(black, 0.12);
    }
    @if ($state == "divider") {
      @return rgba(black, 0.12);
    }
    @if ($state == "secondary-fill") {
      @return rgba(black, 0.08);
    }
    @if ($state == "fill") {
      @return rgba(black, 0.04);
    }
  } @else {
    @if ($state == "primary") {
      @return white;
    }
    @if ($state == "secondary") {
      @return rgba(white, 0.7);
    }
    @if ($state == "disabled") {
      @return rgba(white, 0.5);
    }
    @if ($state == "secondary-disabled") {
      @return rgba(white, 0.3);
    }
    @if ($state == "track") {
      @return rgba(white, 0.3);
    }
    @if ($state == "track-disabled") {
      @return rgba(white, 0.12);
    }
    @if ($state == "divider") {
      @return rgba(white, 0.12);
    }
    @if ($state == "secondary-fill") {
      @return rgba(white, 0.08);
    }
    @if ($state == "fill") {
      @return rgba(white, 0.04);
    }
  }
}

@function highlight($color) {
  @if (lightness($color) >= 80%) {
    @return rgba(white, 0.4);
  } @else if (lightness($color) >= 40%) {
    @return rgba(white, 0.2);
  } @else {
    @return rgba(white, 0.1);
  }
}

@function theme($color) {
  @if ($theme == "default") {
    @return $pink;
  }
}

@function background($type) {
  @if ($blackness == "false") {
    @if ($type == "e") {
      @return $black-darker;
    }
    @if ($type == "f") {
      @return $black-darker;
    }
    @if ($type == "g") {
      @return $black;
    }
    @if ($type == "h") {
      @return #2F3337;
    }
  } @else {
    @if ($type == "e") {
      @return $black-darker;
    }
    @if ($type == "f") {
      @return $black-darker;
    }
    @if ($type == "g") {
      @return $black;
    }
    @if ($type == "h") {
      @return $black-lighter;
    }
  }
}

//
// Basic colors
//

$primary: theme(color);
$drop_target_color: $red;

$background: background(e);
$surface: background(h);
$base: background(g);
$base-alt: background(f);

$tooltip: if(
  $blackness == "true" and $variant == "dark",
  rgba($black, 0.9),
  rgba($grey-darker, 0.9)
);

$scrim: rgba(black, 0.6);
$scrim-alt: rgba(black, 0.3);
$scrim-inverse: rgba(white, 0.1);
$titlebar: background(g);
$titlebar-backdrop: background(g);

$panel-solid: if(
  $blackness == "true",
  $black,
  $black-darker
); // for Unity panel which doesn't allow translucent colors
$panel: if($opacity == "default", rgba($panel-solid, 0.65), $panel-solid);

$button: if(
  $blackness == "true" and $variant == "dark",
  on($background, secondary-fill),
  on($background, fill)
);
$entry: if(
  $blackness == "true" and $variant == "dark",
  on($background, secondary-fill),
  on($background, fill)
);

//
// Misc colors
//

$link: $primary;
$link-visited: $purple;

$warning: $yellow;
$error: $red;
$success: $green;

$suggested: $primary;
$destructive: $error;

$check_radio_primary: $primary;

$frame: rgba($black, 0.16); // instead of shadows
$solid-border: lighten($background, 12%);
$border-alt: rgba($black, 0.16); // darker border color for Chrome and Firefox
$titlebar-indicator: $primary;

//
// Overlay state colors
//

$overlay-normal: gtkalpha(currentColor, 0.05);
$overlay-hover: gtkalpha(currentColor, 0.08);
$overlay-focus: gtkalpha(currentColor, 0.08);
$overlay-focus-hover: gtkalpha(currentColor, 0.16);
$overlay-active: gtkalpha(currentColor, 0.12);
$overlay-checked: gtkalpha(currentColor, 0.1);
$overlay-selected: gtkalpha(currentColor, 0.06);

//
// Text and derivative colors
//

$text: on($background);
$text-secondary: on($background, secondary);
$text-disabled: on($background, disabled);
$text-secondary-disabled: on($background, secondary-disabled);
$track: on($background, track);
$track-disabled: on($background, track-disabled);
$divider: on($background, divider);
$fill: on($background, fill);

$titlebar-text: on($titlebar);
$titlebar-text-secondary: on($titlebar, secondary);
$titlebar-text-disabled: on($titlebar, disabled);
$titlebar-text-secondary-disabled: on($titlebar, secondary-disabled);
$titlebar-track: on($titlebar, track);
$titlebar-track-disabled: on($titlebar, track-disabled);
$titlebar-divider: on($titlebar, divider);
$titlebar-fill: on($titlebar, fill);

// workaround for GTK3 @placeholder_text_color which doesn't allow translucent colors
$placeholder_text_color: if(
  $variant == "light",
  mix(black, $base, percentage(0.6)),
  mix(white, $base, percentage(0.7))
);